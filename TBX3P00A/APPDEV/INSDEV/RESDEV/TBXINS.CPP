/////////////////////////////////////////////////////////////////////////////
// Audio ToolBox Installation DLL
// Copyright (c) 1987-1996 Andrew J. Michalik
/////////////////////////////////////////////////////////////////////////////
#define  _USRDLL					

#include "stdafx.h"						// MSC++ application framework defs
#include <ctype.h>						// Char classification funcs
#include "tbxins.h"						// TBx installation defs

/////////////////////////////////////////////////////////////////////////////
typedef unsigned short  WORD;
typedef unsigned long	DWORD;
typedef const char far  *LPCSTR;

/////////////////////////////////////////////////////////////////////////////
extern "C"
WORD FAR PASCAL _export	InsDLLVer () 
{
	return (INSDLLVER);
}

extern "C"
WORD FAR PASCAL _export	InsDLLIni (WORD usReqTyp, DWORD ulPrm001, DWORD ulPrm002) 
{
	return (0);
}

extern "C"
DWORD FAR PASCAL _export ChkRegSer (WORD usRsv001, LPCSTR szSerNum)
{
	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	#define		DIGSUMCNT   10			// Number of digits to sum
	#define		DIGPOSMUL  100			// Digit position multiplier
	#define		SERMAXLEN   64			// Maximum serial number length
	#define		ASCNUMBAS 0x30			// ASCII numeric base value
	static char	szTmp[SERMAXLEN];		// Temporary work string
	char *		pTmp = szTmp;			// Temporary work string
	long		lSum = 0L;
	int			ii = 0;

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	if (!szSerNum) return (0L);

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	_fstrncpy (szTmp, szSerNum, SERMAXLEN - 1);
	szTmp[SERMAXLEN - 1] = '\0';

	/////////////////////////////////////////////////////////////////////////
	// Calculate the sum of the first DIGSUMCNT digits
	/////////////////////////////////////////////////////////////////////////
	while ((ii < DIGSUMCNT) && _fstrlen(pTmp)) {
		if (isdigit (*pTmp)) {
			lSum = lSum + (*pTmp - ASCNUMBAS);
			ii++;
		}
		pTmp++;
	}

	/////////////////////////////////////////////////////////////////////////
	// Return sum count if requested
	/////////////////////////////////////////////////////////////////////////
	if (usRsv001) return (3 * (lSum * lSum)); 

	/////////////////////////////////////////////////////////////////////////
	// Verify correct number of sum digits
	// Compare Mod of (3 * (sum * sum)) to last digits
	/////////////////////////////////////////////////////////////////////////
	if ((DIGSUMCNT == ii) && (((3 * (lSum * lSum)) % DIGPOSMUL) 
		== atol(pTmp))) return (TRUE);

	/////////////////////////////////////////////////////////////////////////
	return (FALSE);
}

extern "C"
DWORD FAR PASCAL _export ChkRegIns (WORD usRsv001, DWORD ulStrSum, LPCSTR szRegStr)
{
	WORD	usStrLen;
	DWORD	ulStrVal = 0L;
	#define	LICSTRLEN   80          	// Maximum string length

	/////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////
	if (!szRegStr) return (0L);

	/////////////////////////////////////////////////////////////////////////
	// Sum non-whitespace characters preceding any ";" comment delimiter
	/////////////////////////////////////////////////////////////////////////
	usStrLen = min (_fstrlen (szRegStr), LICSTRLEN);
	while (usStrLen-- && (';' != szRegStr[usStrLen])) 
		if isgraph (szRegStr[usStrLen]) ulStrVal += szRegStr[usStrLen];	

	/////////////////////////////////////////////////////////////////////////
	// Generate checksum (3 * (sum * sum)) for input string
	/////////////////////////////////////////////////////////////////////////
	return (ulStrSum + (3 * (ulStrVal * ulStrVal)));

}

