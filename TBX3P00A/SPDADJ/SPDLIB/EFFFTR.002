/************************************************************************/
/* Filter Effects: EffFtr.c                             V2.00  08/15/95 */
/* Copyright (c) 1987-1996 Andrew J. Michalik                           */
/*                                                                      */
/************************************************************************/
#if (defined (W31)) /****************************************************/
#include "windows.h"                    /* Windows SDK definitions      */
#include "..\..\os_dev\winmem.h"        /* Generic memory supp defs     */
#include "..\..\os_dev\winmsg.h"        /* User message support defs    */
#endif /*****************************************************************/
#if (defined (DOS)) /****************************************************/
#include "visdef.h"                     /* VIS Standard type defs       */
#include "..\..\os_dev\dosmem.h"        /* Generic memory support defs  */
#include "..\..\os_dev\dosmsg.h"        /* User message support defs    */
#endif /*****************************************************************/
#include "..\..\fiodev\filutl.h"        /* File utilities definitions   */
#include "..\..\effdev\geneff.h"        /* Sound Effects definitions    */
#include "genspd.h"                     /* PCM conversion defs          */
#include "libsup.h"                     /* PCM conversion lib supp      */

#include <stdlib.h>                     /* Misc string/math/error funcs */
#include <string.h>                     /* String manipulation funcs    */
#include <math.h>                       /* Math library defs            */

/************************************************************************/
/*                          External References                         */
/************************************************************************/
extern  TBXGLO  TBxGlo;

/************************************************************************/
/************************************************************************/
void    CpxMul (CPXFLT, CPXFLT, CPXFLT FAR *);

//ajm
    VOCBLK  vbVocBlk;                   /* Repeated call block          */
//ajm

/************************************************************************/
/************************************************************************/
WORD    FFTFtrAlo (SPDBLK FAR *lpSpdBlk, FFTBLK FAR *lpFFTBlk, 
        EFFPOLPRC lpPolPrc, DWORD ulPolDat)
{
    float   flResRat;
    LPCPXF  lpXfrBuf;

    /********************************************************************/
    /********************************************************************/
    _fmemset (lpFFTBlk, 0, sizeof (*lpFFTBlk));

    /********************************************************************/
    /* Initialize FFT block                                             */
    /********************************************************************/
    flResRat = lpSpdBlk->ulDstFrq / (float) lpSpdBlk->ulSrcFrq;
    if (EffFFTAlo (lpSpdBlk->usFFTOrd, flResRat, lpFFTBlk, lpPolPrc, ulPolDat)) {
        SPDERRMSG ("Error setting FFT filter parameters.\n");
        return ((WORD) -1);
    }

    /********************************************************************/
    /* Initialize / allocate vocoder function block                     */
    /********************************************************************/
    if (EffVocAlo (lpSpdBlk->bfFrcOBS ? MSTVocOBS : NULL, &vbVocBlk, NULL, 
      lpSpdBlk->usFFTOrd, lpSpdBlk->usWinOrd, lpSpdBlk->flSpdMul, 
      lpSpdBlk->flPchMul, lpSpdBlk->flSynThr, lpSpdBlk->ulSrcFrq)) {
        if (TBxGlo.usDebFlg & ERR___DEB) 
            MsgDspUsr ("Error allocating vocoder memory.\n");
EffFFTRel (lpFFTBlk);
        return (0);
    }

//    /********************************************************************/
//    /* Lock data window memory, initialize								*/
//    /* Note: Data window is twice the FFT point size - overlap saved	*/
//    /********************************************************************/
//    if (NULL != (lpWinBuf = (float FAR *) GloMemLck (m_fbFFTBlk.mhWinHdl))) {
//        EffWinGen (EFFWINTAP, lpWinBuf, 2 * m_fbFFTBlk.ulFFTPts);
//        GloMemUnL (m_fbFFTBlk.mhWinHdl);
//    }

    /********************************************************************/
    /* Convert infinite length transfer functions into valid frequency  */
    /* domain filter. Lock FFT filter transfer buffer & window.         */
    /********************************************************************/
    if (NULL != (lpXfrBuf = GloMemLck (lpFFTBlk->mhXfrHdl))) {
        EffWinRsp (EFFWINHAM, lpXfrBuf, lpFFTBlk->ulFFTPts); 
        GloMemUnL (lpFFTBlk->mhXfrHdl);
    }

    /********************************************************************/
    /********************************************************************/
    return (0);

}

WORD    FFTFtrRel (FFTBLK FAR *lpFFTBlk)
{
    /********************************************************************/
    /********************************************************************/
    EffVocRel (&vbVocBlk);
    EffFFTRel (lpFFTBlk);
    return (0);
}

/////////////////////////////////////////////////////////////////////////////
//	Note: MSC 8.0 bug when compiling with Compiler Optimizations = Max Speed
//	Equalizer generates zeros for output data. Is this related
//	to ToolBox 2.00d EffFtr.c MSC 8.0 -Ocglt bug?
/////////////////////////////////////////////////////////////////////////////
#pragma optimize("", off)
/************************************************************************/
/*                  Frequency Domain Filter Routine                     */
/************************************************************************/
WORD FAR PASCAL FFTFtrFnc (float FAR * FAR *ppflSrcBuf, DWORD FAR *lpulDstCnt,
                DWORD ulBufPts, DWORD ulTotPts, DWORD ulHdrPts, DWORD ulCtrPts, 
                DWORD ulDstRem, LPFFTB lpFFTBlk)
{
    SPDBLK  FAR *lpSpdBlk = lpFFTBlk->lpUsrDat;   
    CPXFLT  FAR *lpFFTCpx = (CPXFLT FAR *)(*ppflSrcBuf);
    CPXFLT  FAR *lpXfrBuf;
    DWORD       uli;

    /********************************************************************/
    /* The EffFFTFtr (caller) delivers a set of data points where       */
    /* ulCtrPts at offset ulHdrPts have been isolated to implement      */
    /* the overlap-save method of FFT corruption prevention.            */
    /********************************************************************/
    
    /********************************************************************/
    /* Default returned data count to zero                              */
    /********************************************************************/
    *lpulDstCnt = 0L;

    /********************************************************************/
    /* Completion pass? Indicate done processing...                     */
    /********************************************************************/
    if (!ulCtrPts) return (FALSE);

    /********************************************************************/
    /* Space available in output? Enough room for resampling?           */
    /********************************************************************/
    if (ulDstRem < ulCtrPts * lpFFTBlk->flResRat) return (FALSE);
    if (ulBufPts < ulTotPts * lpFFTBlk->flResRat) return (FALSE);

//    /********************************************************************/
//    /* Window incoming data                                             */
//    /********************************************************************/
//    if (NULL != (lpWinBuf = (float FAR *) GloMemLck (lpFFTBlk->mhWinHdl))) {
//      for (uli=0; uli < ulTotPts; uli++) (*ppflSrcBuf)[uli] *= lpWinBuf[uli];
//      GloMemUnL (lpFFTBlk->mhWinHdl);
//    }

    /********************************************************************/
    /* Transform to frequency domain                                    */
    /********************************************************************/
    EffFFTRea (*ppflSrcBuf, (WORD) (ulTotPts / 2L), EFFFFTFWD);

    /********************************************************************/
    /* Lock FFT filter transfer buffer                                  */
    /********************************************************************/
    if (NULL == (lpXfrBuf = (CPXFLT FAR *) GloMemLck (lpFFTBlk->mhXfrHdl))) 
        return (FALSE);

    /********************************************************************/
    /* Handle DC & Nyquist as special case; pack into real data FFT fmt */
    /********************************************************************/
    lpFFTCpx[0].flRea *= lpXfrBuf[0].flRea;
    lpFFTCpx[0].flImg *= lpXfrBuf[0].flImg;

    /********************************************************************/
    /* Apply filter function, unlock filter transfer buffer when done   */
    /********************************************************************/
    for (uli = 1L; uli < ulTotPts / 2L; uli++) {
        CpxMul (lpFFTCpx[uli], lpXfrBuf[uli], &lpFFTCpx[uli]);
    }
    GloMemUnL (lpFFTBlk->mhXfrHdl);

    /********************************************************************/
    /* Pad with zero if required; transform back to time domain         */
    /********************************************************************/
    for (uli=ulTotPts; uli < ulBufPts; uli++) (*ppflSrcBuf)[uli] = (float) 0;
    EffFFTRea (*ppflSrcBuf, (WORD) ((ulTotPts * lpFFTBlk->flResRat) / 2), EFFFFTINV);
    //
    //  Note: MSC 8.0 bug when compiling DLL with -Ocglt: 
    //  #pragma optimize("", off) has no effect
    //  0 == (WORD) ((ulTotPts * lpFFTBlk->flResRat) / 2)
    //  0 == (WORD) ((lpFFTBlk->flResRat * ulTotPts) / 2)
    //  0 == (WORD) (ulTotPts * (lpFFTBlk->flResRat / 2.))
    //  0 == (WORD) ((double) ulTotPts * ((double) lpFFTBlk->flResRat / 2.))
    //  WORD usTmp = (WORD) ((lpFFTBlk->flResRat * ulTotPts) / 2); // == 0
    //  Note: Appears to only effect the DLL version, not static lib compile
    //

    /********************************************************************/
    /* Set Output buffer to point to good samples (past header)         */
    /********************************************************************/
    *ppflSrcBuf = &(*ppflSrcBuf)[(DWORD) (ulHdrPts * lpFFTBlk->flResRat)];

    /********************************************************************/
    /* Indicate number of valid output samples and continue processing  */
    /********************************************************************/
    *lpulDstCnt = (DWORD) (ulCtrPts * lpFFTBlk->flResRat);

//    /********************************************************************/
//    /* Correct energy level for re-sample                               */
//    /********************************************************************/
//    if (1 != lpFFTBlk->flResRat) for (uli=0; uli < ulCtrPts * lpFFTBlk->flResRat; uli++) 
//        (*ppflSrcBuf)[uli] *= lpFFTBlk->flResRat;

    /********************************************************************/
    /* Return TRUE to continue processing                               */
    /********************************************************************/
    return (TRUE);

}

/////////////////////////////////////////////////////////////////////////////
//	End MSC 8.0 bug
/////////////////////////////////////////////////////////////////////////////
#pragma optimize("", on)

void CpxMul (CPXFLT a, CPXFLT b, CPXFLT FAR *pc)
{
    pc->flRea = a.flRea*b.flRea - a.flImg*b.flImg;
    pc->flImg = a.flImg*b.flRea + a.flRea*b.flImg;
}




/************************************************************************/
/************************************************************************/
#include <math.h>                       /* Math library defs            */
#include "..\vocdev\pv.h"
float PI ;
float TWOPI ;
float synt ;

/*
 * S is a spectrum in rfft format, i.e., it contains N real values
 * arranged as real followed by imaginary values, except for first
 * two values, which are real parts of 0 and Nyquist frequencies;
 * convert first changes these into N/2+1 PAIRS of magnitude and
 * phase values to be stored in output array C; the phases are then
 * unwrapped and successive phase differences are used to compute
 * estimates of the instantaneous frequencies for each phase vocoder
 * analysis channel; decimation rate D and sampling rate R are used
 * to render these frequency values directly in Hz.
 */
void convert( float S[], float C[], int N2, INT D, INT R ) {
 static INT first = 1 ;
 static float *lastphase, fundamental, factor ;
 float phase, phasediff ;
 INT real, imag, amp, freq ;
 float a, b ;
 INT i ;
/*
 * FIRST TIME ONLY: allocate zeroed space for previous phase
 * values for each channel and compute constants
 */
    if ( first ) {
	first = 0 ;
	fvec( lastphase, N2+1 ) ;
	fundamental = (float) R/(N2<<1) ;
        factor = R/(D*TWOPI) ;
    } 
/*
 * unravel rfft-format spectrum: note that N2+1 pairs of
 * values are produced
 */
    for ( i = 0 ; i <= N2 ; i++ ) {
	imag = freq = ( real = amp = i<<1 ) + 1 ;
	a = ( i == N2 ? S[1] : S[real] ) ;
	b = ( i == 0 || i == N2 ? 0. : S[imag] ) ;
/*
 * compute magnitude value from real and imaginary parts
 */
	C[amp] = _hypot( a, b ) ;
/*
 * compute phase value from real and imaginary parts and take
 * difference between this and previous value for each channel
 */
	if ( C[amp] == 0. )
	    phasediff = 0. ;
	else {
	    phasediff = ( phase = -atan2( b, a ) ) - lastphase[i] ;
	    lastphase[i] = phase ;
/*
 * unwrap phase differences
 */
	    while ( phasediff > PI )
		phasediff -= TWOPI ;
	    while ( phasediff < -PI )
		phasediff += TWOPI ;
	}
/*
 * convert each phase difference to Hz
 */
	C[freq] = phasediff*factor + i*fundamental ;
    }
}

/*
 * oscillator bank resynthesizer for phase vocoder analyzer
 * uses sum of N+1 cosinusoidal table lookup oscillators to 
 * compute I (interpolation factor) samples of output O
 * from N+1 amplitude and frequency value-pairs in C;
 * frequencies are scaled by P
 */
void 
oscbank( float C[], int N, float lpcoef[], INT npoles, INT R, INT Nw, 
INT I, float P, float O[] ) {
//AJM
static int NP, L = 4096, first = 1 ;
// static int NP, L = 8192, first = 1 ;
 static float Iinv, *lastamp, *lastfreq, *index, *table ;
 static float Pinc, ffac ;
 INT amp, freq, n, chan ;
/*
 * FIRST TIME ONLY: allocate memory to hold previous values
 * of amplitude and frequency for each channel, the table
 * index for each oscillator, and the table itself; also
 * compute constants
 */
    if ( first ) {
     float TWOPIoL = TWOPI/L, tabscale ;
	first = 0 ;
	fvec( lastamp, N+1 ) ;
	fvec( lastfreq, N+1 ) ;
	fvec( index, N+1 ) ;
	fvec( table, L ) ;
	tabscale = npoles ? 2./Nw : ( Nw >= N ? N : 8*N ) ;
	for ( n = 0 ; n < L ; n++ )
	    table[n] = tabscale*cos( TWOPIoL*n ) ;
	Iinv = 1./I ;
	Pinc = P*L/R ;
	ffac = P*PI/N ;
	if ( P > 1. )
	    NP = N/P ;
	else
	    NP = N ;
    }
/*
 * for each channel, compute I samples using linear
 * interpolation on the amplitude and frequency
 * control values
 */
    for ( chan = npoles ? P : 0 ; chan < NP ; chan++ ) {
     register float a, ainc, f, finc, address ;
	freq = ( amp = ( chan << 1 ) ) + 1 ;
	if ( C[amp] < synt ) /* skip the little ones */
	    continue ;
	C[freq] *= Pinc ;
	finc = ( C[freq] - ( f = lastfreq[chan] ) )*Iinv ;
/*
 * if linear prediction specified, REPLACE phase vocoder amplitude
 * measurements with linear prediction estimates
 */
	if ( npoles ) {
	    if ( f == 0. )
		C[amp] = 0. ;
	    else
		C[amp] = lpamp( chan*ffac, lpcoef[0], lpcoef, npoles ) ;
	}
	ainc = ( C[amp] - ( a = lastamp[chan] ) )*Iinv ;
	address = index[chan] ;
/*
 * accumulate the I samples from each oscillator into
 * output array O (initially assumed to be zero);
 * f is frequency in Hz scaled by oscillator increment
 * factor and pitch (Pinc); a is amplitude;
 */
	for ( n = 0 ; n < I ; n++ ) {
	    O[n] += a*table[ (INT) address ] ;
	    address += f ;
	    while ( address >= L )
		address -= L ;
	    while ( address < 0 )
		address += L ;
	    a += ainc ;
	    f += finc ;
	} 
/*
 * save current values for next iteration
 */
	lastfreq[chan] = C[freq] ;
	lastamp[chan] = C[amp] ;
	index[chan] = address ;
    }
}

/*
 * unconvert essentially undoes what convert does, i.e., it
 * turns N2+1 PAIRS of amplitude and frequency values in
 * C into N2 PAIR of complex spectrum data (in rfft format)
 * in output array S; sampling rate R and interpolation factor
 * I are used to recompute phase values from frequencies
 */
void unconvert( float C[], float S[], int N2, INT I, INT R ) {
 static INT first = 1 ;
 static float *lastphase, fundamental, factor ;
 INT i, real, imag, amp, freq ;
 float mag, phase ;
/*
 * FIRST TIME ONLY: allocate memory and compute constants
 */
    if ( first ) {
	first = 0 ;
	fvec( lastphase, N2+1 ) ;
	fundamental = (float) R/(N2<<1) ;
        factor = TWOPI*I/R ;
    } 
/*
 * subtract out frequencies associated with each channel,
 * compute phases in terms of radians per I samples, and
 * convert to complex form
 */
    for ( i = 0 ; i <= N2 ; i++ ) {
	imag = freq = ( real = amp = i<<1 ) + 1 ;
	if ( i == N2 )
	    real = 1 ;
	mag = C[amp] ;
	lastphase[i] += C[freq] - i*fundamental ;
	phase = lastphase[i]*factor ;
	S[real] = mag*cos( phase ) ;
	if ( i != N2 )
	    S[imag] = -mag*sin( phase ) ;
    }
}

/*
 * evaluate magnitude of transfer function at frequency omega
 */
float lpamp( float omega, float a0, float *coef, INT M ) {
 register float wpr, wpi, wr, wi, re, im, temp ;
 register INT i ;
    if ( a0 == 0. )
	return( 0. ) ;
    wpr = cos( omega ) ;
    wpi = sin( omega ) ;
    re = wr = 1. ;
    im = wi = 0. ;
    for ( coef++, i = 1 ; i <= M ; i++, coef++ ) {
	wr = (temp = wr)*wpr - wi*wpi ;
	wi = wi*wpr + temp*wpi ;
	re += *coef*wr ;
	im += *coef*wi ;
    }
    if ( re == 0. && im == 0. )
	return( 0. ) ;
    else
	return( sqrt( a0/(re*re + im*im) ) ) ;
}

